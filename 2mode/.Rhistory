total <- list()
# sample 수
n_seq <- c(4, 16, 64, 256, 1024)
for (i in 1:5) {
n_sample = n_seq[i]
# n_sample 표본
set.seed(5) # 랜덤 시드 설정
# 심리학과 표본
psych <- data.frame("학과" = "심리학과", "gpa" = rtruncnorm(n = n_sample, a = 0, b = 4.5, mean = 3.75, sd = 0.3))
# 물리학과 표본
set.seed(5)
physics <- data.frame("학과" = "물리학과", "gpa" = rtruncnorm(n = n_sample, a = 0, b = 4.5, mean = 3.45, sd = 0.3))
# 심리학과 + 물리학과
total[[i]] <-  rbind(psych, physics) %>%
arrange(desc(gpa)) %>%
mutate(rank = 1:n())
# rank plot 생성
p_rank[[i]] <- total[[i]] %>%
ggplot(aes(rank, gpa, color = 학과)) +
geom_point(size = 5, alpha = 0.5) +
geom_vline(aes(xintercept = (max(rank) / 4)), size = 1.5, lty = 3)+
scale_color_manual(values = colfunc(2))
# 과별 비율 plot 생성
p_ratio[[i]] <- total[[i]] %>%
filter(rank <= max(rank)/ 4) %>% # 상위 25% 추출
mutate(n_whole = n()) %>%
group_by(학과, n_whole) %>%
summarise(n = n()) %>%
mutate(ratio = n/n_whole) %>% # 상위 25% 이내 학과별 비율 산출
ggplot(aes(학과, ratio, fill = 학과)) +
geom_col(color = "black", size = 1.5) +
geom_text(aes(label = paste0(percent(ratio)," (", n,"명)")), hjust= 0.5, vjust= 1.5,
size = 5) +
scale_fill_manual(values = colfunc(2))
}
# 데이터 저장용 list 생성
p_sd_rank <- list()
p_sd_ratio <- list()
sd_total <- list()
# sample 수
sd_seq <- c(2.5, 1, 0.5, 0.1)
for (i in 1:4) {
sd_sample = sd_seq[i]
# n_sample 표본
set.seed(8) # 랜덤 시드 설정
# 심리학과 표본
psych <- data.frame("학과" = "심리학과", "gpa" = rtruncnorm(n = 20, a = 0, b = 4.5, mean = 3.75, sd = sd_sample))
# 물리학과 표본
set.seed(5)
physics <- data.frame("학과" = "물리학과", "gpa" = rtruncnorm(n = 20, a = 0, b = 4.5, mean = 3.45, sd = sd_sample))
# 심리학과 + 물리학과
total[[i]] <-  rbind(psych, physics) %>%
arrange(desc(gpa)) %>%
mutate(rank = 1:n())
# rank plot 생성
p_sd_rank[[i]] <- total[[i]] %>%
ggplot(aes(rank, gpa, color = 학과)) +
geom_point(size = 5, alpha = 0.5) +
geom_vline(aes(xintercept = (max(rank) / 4)), size = 1.5, lty = 3)+
scale_color_manual(values = colfunc(2))
# 과별 비율 plot 생성
p_sd_ratio[[i]] <- total[[i]] %>%
filter(rank <= max(rank)/ 4) %>% # 상위 25% 추출
mutate(n_whole = n()) %>%
group_by(학과, n_whole) %>%
summarise(n = n()) %>%
mutate(ratio = n/n_whole) %>% # 상위 25% 이내 학과별 비율 산출
ggplot(aes(학과, ratio, fill = 학과)) +
geom_col(color = "black", size = 1.5) +
geom_text(aes(label = paste0(percent(ratio)," (", n,"명)")), hjust= 0.5, vjust= 1.5,
size = 5) +
scale_fill_manual(values = colfunc(2))
}
# 모집단 plot 생성
p_population <-
total[[4]] %>%
group_by(학과) %>%
mutate(gpa_mean  = mean(gpa)) %>%
ungroup() %>%
ggplot(aes(x = gpa, y = ..count../sum(..count..), fill = 학과)) +
geom_density(alpha = 0.5) +
geom_vline(aes(xintercept =gpa_mean, color = 학과), size = 1.5, lty = 3) +
scale_fill_manual(values = (colfunc(2))) +
scale_color_manual(values = (colfunc(2))) +
scale_y_continuous(name = "Prob")
# 표본 10명 데이터
set.seed(2019)
sample <- total[[5]] %>%
group_by(학과) %>%
sample_n(10) %>%
ungroup()
sample_stat <-
total[[5]] %>%
group_by(학과) %>%
sample_n(10) %>%
summarise(학과별학점_평균 = mean(gpa),
학과별학점_표준편차 = sd(gpa)) %>%
kable() %>%
kable_styling()
# 표본 plot
p_sample <- sample %>%
mutate(gpa_mean  = mean(gpa)) %>%
ungroup() %>%
ggplot(aes(x = gpa,  y = ..count../sum(..count..), fill = 학과)) +
geom_density(alpha = 0.5) +
geom_vline(aes(xintercept =gpa_mean, color = 학과), size = 1.5, lty = 3) +
scale_fill_manual(values = (colfunc(2))) +
scale_color_manual(values = (colfunc(2))) +
scale_y_continuous(name = "Prob")
col <- colfunc(3)
distribution <- ggplot(data.frame(x=c(-3,3)), aes(x=x)) +
stat_function(fun=dnorm, colour=col[1], size=2) +
stat_function(fun=dt, args=list(df=3), colour=col[2], size=2, lty = 2) +
stat_function(fun=dt, args=list(df=1), colour=col[3], size=2, lty = 3) +
annotate("segment", x=1.5, xend=2, y=0.4, yend=0.4, colour=col[1], size=2, lty = 1) +
annotate("segment", x=1.5, xend=2, y=0.37, yend=0.37, colour=col[2], size=2, lty = 2) +
annotate("segment", x=1.5, xend=2, y=0.34, yend=0.34, colour=col[3], size=2, lty = 3) +
annotate("text", x=2.4, y=0.4, label="N(0,1)") +
annotate("text", x=2.4, y=0.37, label="t(3)") +
annotate("text", x=2.4, y=0.34, label="t(1)") +
ggtitle("Normal Distribution, t-distribution")
distribution
p_sample
sample_stat
sample_stat
p_population
height_data <- c(0, -1, 1.5, -2, 3, -2.6, 2.3, -4)
weight_data <- c(0, -1, 1.5, -2, 3, -2.6, 2.3, -4)
weight_data
mean(weight_data)
weight_data <- c(0, -1, 1.5, -2, 3, -2.6, 2.3, -4, 2.4, -2.6)
mean(weight_data)
knitr::opts_chunk$set(echo = F, message = F, warning = F, cache=F)
library(tidyverse)
theme_set(theme_light()) # change default plot theme
# source("./W2_script.r", encoding = 'utf-8')
weight_data <- c(0, -1, 1.5, -2, 3, -2.6, 2.3, -4, 2.4, -2.6)
weight_data
summary(weight_data)
sd(weight_data)
par(mfrow=c(2,2))
hist(weight_data)
boxplot(weight_data)
qqnorm(weight_data); qqline(weight_data)
hist(weight_data, prob=T)
lines(density(weight_data), lty=2)
summary(weight_data)
sd(weight_data)
t.test(weight_data)
weight_data <- c(0, -1, -1.5, -2, 3, -2.6, 2.3, -4, 2.4, -2.6)
weight_data
t.test(weight_data)
weight_data <- c(0, -1, -1.5, -2, 3, -2.6, 2.3, -4, -2.4, -2.6)
t.test(weight_data)
# base plot을 사용한 시각화입니다.
# 현재 대세는 ggplot2이므로, 여기선 간단하게 확인만 하고 넘어가겠습니다.
par(mfrow=c(4,1))
hist(weight_data)
boxplot(weight_data)
qqnorm(weight_data); qqline(weight_data)
hist(weight_data, prob=T)
lines(density(weight_data), lty=2)
plot(weight_data)
boxplot(weight_data)
# base plot을 사용한 시각화입니다.
# 현재 대세는 ggplot2이므로, 여기선 간단하게 확인만 하고 넘어가겠습니다.
par(mfrow=c(1,3))
plot(weight_data)
boxplot(weight_data)
hist(weight_data, prob=T)
lines(density(weight_data), lty=2)
# base plot을 사용한 시각화입니다.
# 현재 대세는 ggplot2이므로, 여기선 간단하게 확인만 하고 넘어가겠습니다.
par(mfrow=c(1,3))
plot(weight_data)
boxplot(weight_data)
lines(density(weight_data), lty=2)
# base plot을 사용한 시각화입니다.
# 현재 대세는 ggplot2이므로, 여기선 간단하게 확인만 하고 넘어가겠습니다.
par(mfrow=c(1,3))
plot(weight_data)
boxplot(weight_data)
hist(weight_data, prob=T)
lines(density(weight_data), lty=2)
# base plot을 사용한 시각화입니다.
# 현재 대세는 ggplot2이므로, 여기선 간단하게 확인만 하고 넘어가겠습니다.
par(mfrow=c(1,3))
hist(weight_data, prob=T)
plot(weight_data)
boxplot(weight_data)
# base plot을 사용한 시각화입니다.
# 최근에는 ggplot2가 주로 사용됩니다. base plot은 간단하게 확인하고 넘어가겠습니다.
par(mfrow=c(1,3))
hist(weight_data, prob=T)
plot(weight_data)
boxplot(weight_data)
# base plot을 사용한 시각화입니다.
# 최근에는 ggplot2가 주로 사용됩니다. base plot은 간단하게 확인하고 넘어가겠습니다.
par(mfrow=c(1,3))
hist(weight_data, prob=T)
plot(weight_data)
boxplot(weight_data)
# base plot을 사용한 시각화입니다.
# 최근에는 ggplot2가 주로 사용됩니다. base plot은 간단하게 확인하고 넘어가겠습니다.
par(mfrow=c(1,3))
hist(weight_data, prob=T)
plot(weight_data)
boxplot(weight_data)
summary(weight_data)
sd(weight_data)
weight_data <- c(0, -1, -1.5, -2, 3, 2.6, 2.3, 4, 2.4, 2.6)
weight_data
t.test(weight_data)
summary(weight_data)
sd(weight_data)
summary(weight_data)
student_info
library(dbplyr)
mf <- memdb_frame(x = 1, y = 2)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
getwd()
source("../../func.r")
course_history_files <- list.files("../../", pattern = "재학생_학부_수강이력", full.names = T)
course_history_raw <- lapply(course_history_files,
FUN = function(files) {
read.delim(files, header=T,
sep = "|", stringsAsFactors = FALSE)
}) %>%
bind_rows() %>%
as_tibble()
course_history_raw %>%
distinct(학과코드, 캠퍼스구분)
course_history_raw
a <- course_history_raw %>%
distinct(개설학과코드, 캠퍼스구분)
a
write.csv(a, file = "학과정보", fileEncoding = 'utf-8', row.names=F)
write.csv(a, file = "학과정보.csv", fileEncoding = 'utf-8', row.names=F)
학과정보 <- read_csv("학과정보.csv")
학과정보 <- read_csv("../../학과정보.csv")
학과정보
학과정보 <- read_csv("../../학과정보.csv")
############################################################################
######################### 재학생 기본정보 ################################
############################################################################
student_info <- read.delim("../../재학생_학부_기본정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE) %>%
as_tibble() %>%
mutate(student_code = 1:n()) %>%
filter(입학년도 == 2015) %>%
left_join(학과정보, by = 학과코드)
student_info
############################################################################
######################### 재학생 기본정보 ################################
############################################################################
student_info <- read.delim("../../재학생_학부_기본정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE) %>%
as_tibble() %>%
mutate(student_code = 1:n()) %>%
filter(입학년도 == 2015) %>%
left_join(학과정보, by = "학과코드")
학과정보 %>%
mutate(학과코드 = as.numeric(학과코드))
학과정보 %>%
mutate(학과코드 = as.numeric(학과코드))
학과정보 <- read_csv("../../학과정보.csv")
학과정보 %>%
mutate(학과코드 = as.numeric(학과코드))
학과정보
학과정보 %>%
mutate(학과코드 = as.numeric(학과코드))
?read_csv
2
학과정보 %>%
mutate(학과코드2 = as.numeric(학과코드))
학과정보 %>% View()
학과정보 <- 학과정보 %>% filter(nchar(학과코드) < 5)
학과정보
write.csv(학과정보, "../../학과정보.csv")
############################################################################
######################### 재학생 기본정보 ################################
############################################################################
student_info <- read.delim("../../재학생_학부_기본정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE) %>%
as_tibble() %>%
mutate(student_code = 1:n()) %>%
filter(입학년도 == 2015) %>%
left_join(학과정보, by = "학과코드")
학과정보 <- read.csv("../../학과정보.csv")
############################################################################
######################### 재학생 기본정보 ################################
############################################################################
student_info <- read.delim("../../재학생_학부_기본정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE) %>%
as_tibble() %>%
mutate(student_code = 1:n()) %>%
filter(입학년도 == 2015) %>%
left_join(학과정보, by = "학과코드")
student_info
sum(is.na(student_info$캠퍼스구분))
############################################################################
######################### 재학생 기본정보 ################################
############################################################################
student_info <- read.delim("../../재학생_학부_기본정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE) %>%
as_tibble() %>%
mutate(student_code = 1:n()) %>%
filter(입학년도 == 2015) %>%
left_join(학과정보, by = "학과코드") %>%
filter(캠퍼스구분 == 1)
student_info
View(student_info)
############################################################################
######################### 재학생 기본정보 ################################
############################################################################
student_info <- read.delim("../../재학생_학부_기본정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE) %>%
as_tibble() %>%
mutate(student_code = 1:n()) %>%
filter(입학년도 == 2015) %>%
left_join(학과정보, by = "학과코드") %>%
filter(캠퍼스구분 == 1)
college_network <- student_info %>%
select(대학, student_code) %>%
mutate(Domain = "단과대학") %>%
rename(Source = student_code, Target = 대학) %>%
mutate(Label = Target)
major_network <- student_info %>%
select(학과, student_code) %>%
mutate(Domain = "학과") %>%
rename(Source = student_code, Target = 학과) %>%
mutate(Label = Target)
award_raw <- read_xls("../../재학생_학부_상벌정보.xls")
award_network <- award_raw %>%
inner_join(student_info, by = "식별자") %>%
mutate(Source = student_code,
Target = case_when(grepl("우수|특대생|명예장학생", 상벌유형)~ "성적우수",
grepl("성적경고|유급", 상벌유형)~ "성적경고및유급" ),
Domain = Target,
Label = 상벌유형) %>%
select(Source, Target, Domain, Label) %>%
filter(!is.na(Target))
exchge_raw <- read.delim("../../전체_교환학생.txt", header=T, sep = "|",
stringsAsFactors = FALSE) %>%
as_tibble()
exchge_network <- exchge_raw %>%
inner_join(student_info, by = "식별자") %>%
filter(합격여부 == "Y",
!파견학기수 %in% c("%", "% ")) %>% # 퍼센트는 뭐지???
select(student_code, 파견대학) %>%
mutate(Domain = "해외대학파견",
Target = "해외대학파견",
Source = student_code,
Label = 파견대학) %>%
select(Source, Target, Domain, Label)
preschool_raw <- read.delim("../../재학생_학부_출신학교.txt", header=T,
sep = "|", stringsAsFactor = F)
preschool_network <- preschool_raw %>%
inner_join(student_info, by = "식별자") %>%
filter(출신교명 != "",
!is.na(출신교졸업년도)) %>%
mutate(Source = student_code,
Domain = "출신교",
Target = 출신교명) %>%
select(Source, Target, Domain) %>%
mutate(Label = Target)
edges <- exchge_network %>%
bind_rows(preschool_network) %>%
# bind_rows(course_history_network) %>%
bind_rows(major_network) %>%
bind_rows(college_network) %>%
bind_rows(award_network)
temp_nodes <- student_info %>%
distinct(student_code) %>%
rename(Id = student_code) %>%
mutate(Domain = "학생",
Label = "학생",
Id = as.character(Id))
nodes <- edges %>%
distinct(Target, .keep_all = T) %>%
rename(Id = Target) %>%
bind_rows(temp_nodes) %>%
mutate(Label = case_when(Domain == "해외대학파견" ~ "해외대학파견",
TRUE ~ Label))
# make nodes
write.csv(nodes, file="nodes_student.csv", fileEncoding = 'utf-8', row.names=F)
write.csv(edges, file="edges_student.csv", fileEncoding = 'utf-8', row.names=F)
nodes %>% select(Label) %>% distinct()
nodes %>% filter(Label == "학생")
# make nodes
write.csv(nodes, file="nodes_student.csv", fileEncoding = 'utf-8', row.names=F)
write.csv(edges, file="edges_student.csv", fileEncoding = 'utf-8', row.names=F)
temp_nodes <- student_info %>%
distinct(student_code) %>%
rename(Id = student_code) %>%
mutate(Domain = "학생",
Label = "학생",
Id = as.character(Id),
Source= Id)
nodes <- edges %>%
distinct(Target, .keep_all = T) %>%
rename(Id = Target) %>%
bind_rows(temp_nodes) %>%
mutate(Label = case_when(Domain == "해외대학파견" ~ "해외대학파견",
TRUE ~ Label))
edges
edges <- exchge_network %>%
bind_rows(preschool_network) %>%
# bind_rows(course_history_network) %>%
bind_rows(major_network) %>%
bind_rows(college_network) %>%
bind_rows(award_network)
edges
edges
temp_nodes <- student_info %>%
distinct(student_code) %>%
rename(Id = student_code) %>%
mutate(Domain = "학생",
Label = "학생",
Id = as.character(Id),
Source= Id)
nodes
nodes <- edges %>%
distinct(Target, .keep_all = T) %>%
rename(Id = Target) %>%
bind_rows(temp_nodes) %>%
mutate(Label = case_when(Domain == "해외대학파견" ~ "해외대학파견",
TRUE ~ Label))
temp_nodes
edges %>%
distinct(Target, .keep_all = T) %>%
rename(Id = Target)
temp_nodes <- student_info %>%
distinct(student_code) %>%
rename(Id = student_code) %>%
mutate(Domain = "학생",
Label = "학생",
Id = as.character(Id))
nodes <- edges %>%
distinct(Target, .keep_all = T) %>%
rename(Id = Target) %>%
bind_rows(temp_nodes) %>%
mutate(Label = case_when(Domain == "해외대학파견" ~ "해외대학파견",
TRUE ~ Label))
nodes
nodes %>% filter(Domain == "학생")
temp_nodes <- student_info %>%
distinct(student_code) %>%
rename(Id = student_code) %>%
mutate(Domain = "학생",
Label = "학생",
Source = Id,
Id = as.character(Id))
temp_nodes
nodes <- edges %>%
distinct(Target, .keep_all = T) %>%
rename(Id = Target) %>%
bind_rows(temp_nodes) %>%
mutate(Label = case_when(Domain == "해외대학파견" ~ "해외대학파견",
TRUE ~ Label))
nodes
# make nodes
write.csv(nodes, file="nodes_student.csv", fileEncoding = 'utf-8', row.names=F)
write.csv(edges, file="edges_student.csv", fileEncoding = 'utf-8', row.names=F)
temp_nodes <- student_info %>%
distinct(student_code) %>%
rename(Id = student_code) %>%
mutate(Domain = "학생",
Label = "",
Source = Id,
Id = as.character(Id))
nodes <- edges %>%
distinct(Target, .keep_all = T) %>%
rename(Id = Target) %>%
bind_rows(temp_nodes) %>%
mutate(Label = case_when(Domain == "해외대학파견" ~ "해외대학파견",
TRUE ~ Label))
# make nodes
write.csv(nodes, file="nodes_student.csv", fileEncoding = 'utf-8', row.names=F)
library(tidyverse)
library(janitor)
library(widyr)
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
getwd()
source("../../func.r")
year_term_tl <- tibble("year_term" = paste(rep(2001:2019, each=2), c("1R", "2R"), sep = "_"),
"Num_year_term" = 1:38)
year_term_tl <- tibble(year = rep(2001:2020, each = 2),
term = rep(c("1R", "2R"), 20)) %>%
mutate(date = case_when(term == "1R" ~ "01/03",
TRUE ~ "01/09"),
date = paste0(date,"/",year),
year_term = paste(year, term, sep = "_"),
Num_year_term = 1:n())
학과정보 <- read.csv("../../학과정보.csv")
############################################################################
######################### 재학생 기본정보 ################################
############################################################################
student_info <- read.delim("../../재학생_학부_기본정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE) %>%
as_tibble() %>%
mutate(student_code = 1:n()) %>%
filter(입학년도 == 2015) %>%
left_join(학과정보, by = "학과코드") %>%
filter(캠퍼스구분 == 1)
student_info
award_raw <- read_xls("../../재학생_학부_상벌정보.xls")
award_raw
award_raw %>% distinct(상벌유형)

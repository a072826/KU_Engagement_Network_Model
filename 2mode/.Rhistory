mutate(parID = str_extract(string = SelfCI, "([a-z][0-9]..)"))
participant <- participant %>%
left_join(SelfCI_list, by = "parID")
####################################################################################
# positiveRC 파일 ####################################################################
####################################################################################
positiveRC <- list.files("검사 도구/reverse_correlation2/data", pattern = ".csv")
positiveRC_list <- positiveRC %>%
as_tibble() %>%
rename(positiveRC = value) %>%
mutate(parID = str_extract(string = positiveRC, "([a-z][0-9]..)"))
participant <- participant %>%
left_join(positiveRC_list, by = "parID")
####################################################################################
# positiveCI 파일 ####################################################################
####################################################################################
positiveCI <- list.files("검사 도구/CI_gen_off2/cis", pattern = ".jpg")
positiveCI_list <- positiveCI %>%
as_tibble() %>%
rename(positiveCI_path = value) %>%
mutate(parID = str_extract(string = positiveCI, "([a-z][0-9]..)"))
participant <- participant %>%
left_join(positiveCI_list, by = "parID")
####################################################################################
# lexical decision 파일 ####################################################################
####################################################################################
lex_d <- list.files("검사 도구/lex_d/data", pattern = ".csv")
lex_d_list <- lex_d %>%
as_tibble() %>%
mutate(lexical_decision = '실시') %>%
mutate(parID = str_extract(string = value, "([a-z][0-9]..)")) %>%
select(-value)
participant <- participant %>%
left_join(lex_d_list, by = "parID")
participant <- participant %>%
mutate(sex = substr(parID, 1,1)) %>%
arrange(parID) %>%
group_by(sex) %>%
mutate(group = case_when(row_number() %in% 1:(n()/2) ~ 1,
TRUE ~ 2)) %>%
ungroup()
participant <- participant %>%
group_by(sex, group) %>%
mutate(group_by_group = case_when(row_number() %in% 1:(n()/2) ~
paste("group", group, "Session", 1, sep = "_"),
TRUE ~ paste("group", group, "Session", 2, sep = "_"))) %>%
ungroup() %>%
mutate(stimPath_selfCI = paste0("'", selfCI_path, "',")) %>%
arrange(group_by_group)
writexl::write_xlsx(participant, "검사참여일람.xlsx")
35/50
35/50*60
14*35
participant %>%
mutate(stimPath_photo = str_extract("[a-][0-9]{4}"))
participant %>%
mutate(stimPath_photo = paste0(parID, ".jpg"))
participant %>%
mutate(stimPath_photo = paste0(parID, ".jpg")) %>%
select(stimPath_photo)
participant %>%
mutate(stimPath_photo = paste0("'",parID, ".jpg', ")) %>%
select(stimPath_photo)
participant <- participant %>%
mutate(stimPath_photo = paste0("'",parID, ".jpg', "))
writexl::write_xlsx(participant, "검사참여일람.xlsx")
library(tidyverse)
library(janitor)
library(widyr)
library(readxl)
library(Matrix)
library(widyr)
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
getwd()
source("../../../R_functions/func.r", encoding = 'utf-8')
################
.accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
year_term_tl <- tibble("year_term" = paste(rep(2000:2019, each=2), c("1R", "2R"), sep = "_"),
"Num_year_term" = 1:40)
year_term_tl <- tibble(year = rep(2000:2020, each = 2),
term = rep(c("1R", "2R"), 21)) %>%
mutate(date = case_when(term == "1R" ~ "01/03",
TRUE ~ "01/09"),
date = paste0(date,"/",year),
year_term = paste(year, term, sep = "_"),
Num_year_term = 1:n())
학과정보 <- read.csv("../../../학과정보.csv") %>%
select(-X)
student_info_alumni <- read.delim("../../../졸업생_학부_기본정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE) %>%
filter(졸업년도 > 2010) %>%
filter(입학년도 >= 2000)   %>%
left_join(학과정보, by = "학과코드") %>%
mutate(생년월일 = as.numeric(str_extract(string = (생년월일), "[0-9]{4}"))) %>%
filter(캠퍼스구분 == 1)
student_info_std <- read.delim("../../../재학생_학부_기본정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE) %>%
filter(입학년도 %in% c(2001:2019)) %>%
left_join(학과정보, by = "학과코드") %>%
mutate(생년월일 = as.numeric(str_extract(string = (생년월일), "[0-9]{4}"))) %>%
filter(캠퍼스구분 == 1)
# DB에서 생년월일에 대한 자료형이 다르기 때문에 각각 따로 처리
student_info <- student_info_alumni %>%
bind_rows(student_info_std) %>%
mutate(나이 = (입학년도 - 생년월일) +1 ) %>%
mutate(student_code = 1:n()) %>%
as_tibble()
rm(student_info_alumni)
rm(student_info_std)
################
.accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
year_term_tl <- tibble("year_term" = paste(rep(2000:2019, each=2), c("1R", "2R"), sep = "_"),
"Num_year_term" = 1:40)
year_term_tl <- tibble(year = rep(2000:2020, each = 2),
term = rep(c("1R", "2R"), 21)) %>%
mutate(date = case_when(term == "1R" ~ "01/03",
TRUE ~ "01/09"),
date = paste0(date,"/",year),
year_term = paste(year, term, sep = "_"),
Num_year_term = 1:n())
학과정보 <- read.csv("../../../학과정보.csv") %>%
select(-X)
student_info_alumni <- read.delim("../../../졸업생_학부_기본정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE) %>%
filter(졸업년도 > 2010) %>%
filter(입학년도 >= 2000)   %>%
left_join(학과정보, by = "학과코드") %>%
mutate(생년월일 = as.numeric(str_extract(string = (생년월일), "[0-9]{4}"))) %>%
filter(캠퍼스구분 == 1)
student_info_std <- read.delim("../../../재학생_학부_기본정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE) %>%
filter(입학년도 %in% c(2001:2019)) %>%
left_join(학과정보, by = "학과코드") %>%
mutate(생년월일 = as.numeric(str_extract(string = (생년월일), "[0-9]{4}"))) %>%
filter(캠퍼스구분 == 1)
# DB에서 생년월일에 대한 자료형이 다르기 때문에 각각 따로 처리
student_info <- student_info_alumni %>%
bind_rows(student_info_std) %>%
mutate(나이 = (입학년도 - 생년월일) +1 ) %>%
mutate(student_code = 1:n()) %>%
as_tibble()
rm(student_info_alumni)
rm(student_info_std)
rm(학과정보보)
rm(학과정보)
rm(학과정보)
rm(학과정보)
rm("학과정보")
############################################################################
######################### 학년 및 나이 네트워크  ################################
############################################################################
school_year_age_raw <- read.delim("../../../전체_학부_학년.txt", header = T,
sep = "|", stringsAsFactors = FALSE) %>%
inner_join(student_info %>%
select(식별자, student_code, 나이, 입학년도), by = "식별자") %>%
mutate(학년 = ifelse(!학년%in%c(1:5), NA, 학년)) %>%
mutate(나이 = 나이 + (년도 - 입학년도)) %>%
mutate(year_term = paste(년도, 학기, sep="_")) %>%
left_join(year_term_tl %>%
select(year_term, Num_year_term), by = "year_term") %>%
arrange(년도, 학기) %>%
# 2015년2학기(학년 = 0), 2017년 자료 (학년 = -9)라는 문제 있음
group_by(식별자) %>%
fill(학년, .direction = "downup") %>%
ungroup() %>%
as_tibble()
network_school_year_age <- school_year_age_raw %>%
pivot_longer(cols = c("학년", "나이"), names_to = "Domain", values_to = "Target") %>%
mutate(Target = as.character(Target)) %>%
rename(Source = student_code) %>%
select(Source, Target, Num_year_term, Domain) %>%
mutate(Label = Target) %>%
as_tibble()
rm(school_year_age_raw)
network_ent <- student_info %>%
select(student_code, 입학유형, 입학년도) %>%
mutate(Domain = "입학유형") %>%
rename(Source = student_code,
Target = 입학유형,
Year = 입학년도
) %>%
mutate(Label = Target)
preschool_alumni <- read.delim("../../../졸업생_학부_출신학교.txt", header=T,
sep = "|", stringsAsFactor = F) %>%
mutate(출신교졸업년도 = as.numeric(출신교졸업년도))
preschool_std <- read.delim("../../../재학생_학부_출신학교.txt", header=T,
sep = "|", stringsAsFactor = F) %>%
mutate(출신교졸업년도 = as.numeric(출신교졸업년도))
#  자료 join
preschool_raw <-  bind_rows(preschool_alumni, preschool_std) %>%
as_tibble() %>%
select(-출신교코드)
network_preschool <- preschool_raw %>%
inner_join(student_info, by = "식별자") %>%
filter(출신교명 != "",
!is.na(출신교졸업년도)) %>%
mutate(Source = student_code,
Domain = "출신교",
Target = 출신교명,
Category = "출신교") %>%
mutate(year_term = paste(입학년도, 입학학기, sep="_")) %>%
left_join(year_term_tl %>%
select(year_term, Num_year_term), by = "year_term") %>%
select(Source, Target, Num_year_term, Domain) %>%
mutate(Label = Target) %>%
as_tibble()
rm(preschool_alumni)
rm(preschool_std)
rm(preschool_raw)
network_major <- student_info %>%
mutate(Domain = "학과") %>%
rename(Source = student_code,
Target = 학과) %>%
mutate(year_term = paste(입학년도, 입학학기, sep="_")) %>%
left_join(year_term_tl %>%
select(year_term, Num_year_term), by = "year_term") %>%
select(Source, Target, Num_year_term, Domain) %>%
mutate(Label = Target) %>%
as_tibble()
network_college <- student_info %>%
mutate(Domain = "대학") %>%
rename(Source = student_code,
Target = 대학) %>%
mutate(year_term = paste(입학년도, 입학학기, sep="_")) %>%
left_join(year_term_tl %>%
select(year_term, Num_year_term), by = "year_term") %>%
select(Source, Target, Num_year_term, Domain) %>%
mutate(Label = Target) %>%
as_tibble()
record_alumni <- read.delim("../../../졸업생_학부_학적변동내역.txt", header = T,
sep = "|", stringsAsFactors = FALSE)
record_std <- read.delim("../../../재학생_학부_학적변동내역.txt", header = T,
sep = "|", stringsAsFactors = FALSE)
# 학적변동 자료 join
record_raw <-  bind_rows(record_alumni, record_std) %>%
inner_join(student_info, by = "식별자") %>%
mutate(year_term = paste(년도, 학기, sep="_")) %>%
left_join(year_term_tl %>%
select(year_term, Num_year_term), by = "year_term") %>%
as_tibble()
network_leaveOfAbsence <-
record_raw %>%
filter(grepl("휴학|복학", 변동유형)) %>%  # 학적 변동 중 휴학 및 복학만 활용
select(student_code, Num_year_term, 변동유형) %>%
arrange(student_code, Num_year_term) %>%
# 휴학한 학기를 추출함
group_by(student_code, idx = cumsum(grepl("복학|제적", 변동유형))) %>%
mutate(count = 1:n()) %>%
group_by(student_code, idx, 변동유형) %>%
summarise(Num_year_term = min(Num_year_term)) %>%
ungroup() %>%
arrange(student_code, Num_year_term) %>%
mutate(idx = ifelse(grepl("복학|제적", 변동유형), idx-1, idx))  %>%
# 휴학유형 구분 (군복무 vs. 일반)
mutate(휴학유형 = ifelse(grepl("군", 변동유형), "군복무", "일반")) %>%
group_by(student_code, idx, 휴학유형) %>%
summarise(start = min(Num_year_term),
end = max(Num_year_term),
휴학기간 = end-start) %>%
uncount(휴학기간) %>%
group_by(student_code, idx) %>%
mutate(Num_year_term = start + row_number()-1) %>%
ungroup() %>%
# 휴학 Edge 데이터
mutate(Source = student_code,
Target = paste0(휴학유형, "휴학"),
Domain = paste0(휴학유형, "휴학"),
Label = paste0(휴학유형, "휴학")) %>%
select(Source, Target, Domain, Num_year_term, Label)
# 휴학 제외 학적변동
network_record <- record_raw %>%
filter(!grepl("휴학|복학|휴학경과제적", 변동유형)) %>%
select(student_code, Num_year_term, 변동유형) %>%
arrange(student_code, Num_year_term) %>%
mutate(Source = student_code,
Target = 변동유형,
Domain = 변동유형,
Label = 변동유형) %>%
select(Source, Target, Domain, Num_year_term, Label)
rm(record_alumni)
rm(record_std)
rm(record_raw)
scholarship_alumni <- read.delim("../../../졸업생_학부_장학금수혜.txt", header = T,
sep = "|", stringsAsFactors = FALSE)
scholarship_std <- read.delim("../../../재학생_학부_장학금수혜.txt", header = T,
sep = "|", stringsAsFactors = FALSE)
scholarship_raw <- bind_rows(scholarship_alumni, scholarship_std) %>%
as_tibble() %>%
mutate(입학금 = abs(입학금),
등록금 = abs(등록금),
기타금액 = abs(기타금액),
기성회비 = replace_na(기성회비, 0),
입학금 = replace_na(입학금, 0),
등록금 = replace_na(등록금, 0),
기타금액 = replace_na(기타금액, 0),
수혜금액 = 기성회비 + 입학금 + 등록금 + 기타금액)  %>%
filter(grepl("^성적우수장학금\\(|진리형|진리장학금",장학금명))
network_scholarship <- scholarship_raw %>%
inner_join(student_info, by = "식별자") %>%
mutate(year_term = paste(년도, 학기, sep="_")) %>%
left_join(year_term_tl %>%
select(year_term, Num_year_term), by = "year_term") %>%
select(student_code, Num_year_term, 장학금명) %>%
arrange(student_code, Num_year_term) %>%
mutate(Source = student_code,
Target = 장학금명,
Domain = "장학금수혜",
Label = 장학금명) %>%
select(Source, Target, Domain, Num_year_term, Label)
rm(scholarship_alumni)
rm(scholarship_std)
rm(scholarship_raw)
award_alumni <- read.delim("../../../졸업생_학부_상벌정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE)
award_std <- read.delim("../../../재학생_학부_상벌정보.txt", header = T,
sep = "|", stringsAsFactors = FALSE)
award_raw <-  bind_rows(award_alumni, award_std) %>%
mutate(year_term = paste(년도, 학기, sep="_")) %>%
left_join(year_term_tl %>%
select(year_term, Num_year_term), by = "year_term") %>%
as_tibble()
network_award <- award_raw %>%
inner_join(student_info, by = "식별자") %>%
mutate(Source = student_code,
Target = 상벌유형,
Domain = Target,
Label = 상벌유형) %>%
select(Source, Target, Domain, Num_year_term, Label) %>%
filter(nchar(Target)!=0)
rm(award_alumni)
rm(award_std)
rm(award_raw)
# 학기 데이터 필요
kuscc_raw <- read_xlsx("../../../전체_학부_학생상담센터.xlsx") %>%
distinct(year, term, group, 식별자) %>%
mutate(year_term = paste(year, term, sep="_")) %>%
left_join(year_term_tl %>%
select(year_term, Num_year_term), by = "year_term") %>%
group_by(group) %>%
mutate(n_group = n()) %>%
filter(n_group > 10) %>%
ungroup()
network_kuscc <- kuscc_raw %>%
inner_join(student_info, by = "식별자") %>%
mutate(Source = student_code,
Target = group,
Domain = "학생상담센터",
Label = group) %>%
select(Source, Target, Domain, Num_year_term, Label) %>%
filter(nchar(Target)!=0)
rm(kuscc_raw)
# 엣지 합치기
edges <- network_preschool %>%
bind_rows(network_school_year_age) %>%
bind_rows(network_scholarship) %>%
# bind_rows(network_exchange) %>%
# bind_rows(network_course_history) %>%
bind_rows(network_college) %>%
bind_rows(network_major) %>%
bind_rows(network_award) %>%
bind_rows(network_record) %>%
bind_rows(network_leaveOfAbsence) %>%
bind_rows(network_kuscc) %>%
as_tibble() %>%
mutate(Target = gsub("[[:space:]]", "", Target)) %>%
mutate(참여여부 = 1)
nodes_engagement <- edges %>%
filter(!Domain %in% c("출신교", "대학", "학과", "성별", "나이", "학년")) %>%
reshape2::dcast(Source ~ Domain, value.var = "참여여부") %>%
janitor::clean_names() %>%
as_tibble()
?dcast
nodes_engagement <- edges %>%
filter(!Domain %in% c("출신교", "대학", "학과", "성별", "나이", "학년")) %>%
reshape2::dcast(Source ~ Domain, value.var = 참여여부) %>%
janitor::clean_names() %>%
as_tibble()
#Air quality example
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
library(reshape2)
#Air quality example
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
aqm
acast(aqm, day ~ month ~ variable)
acast(aqm, month ~ variable, mean)
aqm
acast(aqm, month ~ variable, mean)
acast(aqm, month ~ variable, mean, margins = TRUE)
dcast(aqm, month ~ variable, mean, margins = c("month", "variable"))
library(plyr) # needed to access . function
acast(aqm, variable ~ month, mean, subset = .(variable == "ozone"))
acast(aqm, variable ~ month, mean, subset = .(month == 5))
#Chick weight example
names(ChickWeight) <- tolower(names(ChickWeight))
chick_m <- melt(ChickWeight, id=2:4, na.rm=TRUE)
dcast(chick_m, time ~ variable, mean) # average effect of time
dcast(chick_m, diet ~ variable, mean) # average effect of diet
acast(chick_m, diet ~ time, mean) # average effect of diet & time
nodes_engagement
View(nodes_engagement)
edges
edges %>% as_tibble()
edges %>%
distinct(Target, Num_year_term, .keep_all = T)
edges %>%
distinct(Target, Num_year_term, .keep_all = T) %>%
rename(Id = Target)
edges %>%
distinct(Target, Num_year_term, .keep_all = T)
nodes_std
nodes_std <-
student_info %>%
rename(Id = student_code) %>%
left_join(nodes_engagement, by = c("Id" = "source")) %>%
mutate(Domain = "학생",
Label = "",
Source = Id,
Id = as.character(Id))
nodes_std <-
student_info %>%
rename(Id = student_code) %>%
left_join(nodes_engagement, by = c("Id" = "source")) %>%
mutate(Domain = "학생",
Label = "",
Source = Id,
Id = as.character(Id))
nodes_engagement <- edges %>%
filter(!Domain %in% c("출신교", "대학", "학과", "성별", "나이", "학년")) %>%
reshape2::dcast(Source ~ Domain, value.var = "참여여부") %>%
janitor::clean_names() %>%
as_tibble()
nodes_std <-
student_info %>%
rename(Id = student_code) %>%
left_join(nodes_engagement, by = c("Id" = "source")) %>%
mutate(Domain = "학생",
Label = "",
Source = Id,
Id = as.character(Id))
student_info
student_info %>%
rename(Id = student_code)
nodes_engagement <- edges %>%
filter(!Domain %in% c("출신교", "대학", "학과", "성별", "나이", "학년")) %>%
reshape2::dcast(Source ~ Domain, value.var = "참여여부") %>%
janitor::clean_names() %>%
as_tibble()
nodes_engagement
################
.accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
year_term_tl <- tibble("year_term" = paste(rep(2000:2019, each=2), c("1R", "2R"), sep = "_"),
"Num_year_term" = 1:40)
year_term_tl <- tibble(year = rep(2000:2020, each = 2),
term = rep(c("1R", "2R"), 21)) %>%
mutate(date = case_when(term == "1R" ~ "01/03",
TRUE ~ "01/09"),
date = paste0(date,"/",year),
year_term = paste(year, term, sep = "_"),
Num_year_term = 1:n())
학과정보 <- read.csv("../../../학과정보.csv") %>%
select(-X)
year_term_tl <- tibble("year_term" = paste(rep(2000:2019, each=2), c("1R", "2R"), sep = "_"),
"Num_year_term" = 1:40)
year_term_tl <- tibble(year = rep(2000:2020, each = 2),
term = rep(c("1R", "2R"), 21)) %>%
mutate(date = case_when(term == "1R" ~ "01/03",
TRUE ~ "01/09"),
date = paste0(date,"/",year),
year_term = paste(year, term, sep = "_"),
Num_year_term = 1:n())
year_term_tl <- tibble("year_term" = paste(rep(2000:2019, each=2), c("1R", "2R"), sep = "_"),
"Num_year_term" = 1:40)
year_term_tl <- tibble(year = rep(2000:2020, each = 2),
term = rep(c("1R", "2R"), 21)) %>%
mutate(date = case_when(term == "1R" ~ "01/03",
TRUE ~ "01/09"),
date = paste0(date,"/",year),
year_term = paste(year, term, sep = "_"),
Num_year_term = 1:n())
tibble(year = rep(2000:2020, each = 2),
term = rep(c("1R", "2R"), 21)) %>%
mutate(date = case_when(term == "1R" ~ "01/03",
TRUE ~ "01/09"),
date = paste0(date,"/",year),
year_term = paste(year, term, sep = "_"),
Num_year_term = 1:n())

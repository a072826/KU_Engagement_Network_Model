library(tidytext)
library(rcicr)
library(dplyr)
library(readr)
library(shinyjs)
library(shiny)
library(stringr)

# library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
getwd()

# Define UI for application that draws a histogram
ui <- fluidPage(
   
  shinyjs::useShinyjs(),
  # Application title
  titlePanel("CI 처리"),
  
  
  
  
  # Sidebar with a slider input for number of bins 
  sidebarLayout(
    sidebarPanel(
      textInput("parID", label = "참가자 ID", value="수검자 ID 입력"),
      actionButton("submit", "Submit", class = "btn-primary")
    ),
    
    # Show a plot of the generated distribution
    textOutput("parName")
    
  )
)

server <- function(input, output, session) {
  
  values <- reactiveValues()
  session$onSessionEnded(function() {
    stopApp()
  })
  
  observeEvent(input$submit, {
    parID <- input$parID 
    print(parID)
    
    list <-
      list.files(path = "../reverse_correlation2/data",
                 full.names = T,
                 pattern = "*.csv")

    parData <- list[str_detect(list, parID)]
 
   if (sum(str_detect(list, parID))==0)  {
       
       values$status <- "참가자 ID를 잘못 적었습니다."
       
   } else {
     
     values$parName <- parData
     par <- read_csv(parData)
     par <- data.frame(par)
     par$response <- ifelse(par$key_resp_4.keys == "f",
                            1,
                            ifelse(par$key_resp_4.keys == "j",-1, "None"))
     
     par$participant <- par$par_ID
     par <- subset(par, par$response != "None")
     par$ID <- as.numeric(str_extract(par$ori_stim, '[0-9]{5}'))
     par$response <- as.numeric(par$response)

     sex = ifelse(substr(input$parID, 1, 1) == "m", "male", "female")
     rdatafile = ifelse(substr(str_extract("[a-z][0-9][0-9]", string = parData), 1, 1) == "m",
                        "5_male.Rdata",
                        "5_female.Rdata")
     baseimage <- sex

         ci <- batchGenerateCI2IFC(
           par,
           by = 'participant',
           stimuli = 'ID',
           responses = 'response',
           baseimage = baseimage,
           rdata = rdatafile,
           targetpath = "../",
           antiCI = F,
           saveasjpeg = F)

         scaled_cis <- autoscale(ci, saveasjpegs = TRUE)
     values$status <- "제작 완료"
   } 
  })
  
  
  output$parName <- renderPrint({
    
    cat(paste0(values$parName, "\n",
    values$status))
    
  })
  
   output$distPlot <- renderPlot({
      # generate bins based on input$bins from ui.R
      x    <- faithful[, 2] 
      bins <- seq(min(x), max(x), length.out = 1)
      
      # draw the histogram with the specified number of bins
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
   })
}

# Run the application 
shinyApp(ui = ui, server = server)

